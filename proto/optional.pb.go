// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: proto/optional.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TypeOptional int32

const (
	TypeOptional_TYPEOptional_UNSPECIFIED TypeOptional = 0
	TypeOptional_TYPEOptional_R           TypeOptional = 1
	TypeOptional_TYPEOptional_S           TypeOptional = 2
)

// Enum value maps for TypeOptional.
var (
	TypeOptional_name = map[int32]string{
		0: "TYPEOptional_UNSPECIFIED",
		1: "TYPEOptional_R",
		2: "TYPEOptional_S",
	}
	TypeOptional_value = map[string]int32{
		"TYPEOptional_UNSPECIFIED": 0,
		"TYPEOptional_R":           1,
		"TYPEOptional_S":           2,
	}
)

func (x TypeOptional) Enum() *TypeOptional {
	p := new(TypeOptional)
	*p = x
	return p
}

func (x TypeOptional) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TypeOptional) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_optional_proto_enumTypes[0].Descriptor()
}

func (TypeOptional) Type() protoreflect.EnumType {
	return &file_proto_optional_proto_enumTypes[0]
}

func (x TypeOptional) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TypeOptional.Descriptor instead.
func (TypeOptional) EnumDescriptor() ([]byte, []int) {
	return file_proto_optional_proto_rawDescGZIP(), []int{0}
}

type MessageOptional struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *string       `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	BirthDay *int64        `protobuf:"varint,2,opt,name=birthDay,proto3,oneof" json:"birthDay,omitempty"`
	Phone    *string       `protobuf:"bytes,3,opt,name=phone,proto3,oneof" json:"phone,omitempty"`
	Siblings *int32        `protobuf:"varint,4,opt,name=siblings,proto3,oneof" json:"siblings,omitempty"`
	Spouse   *bool         `protobuf:"varint,5,opt,name=spouse,proto3,oneof" json:"spouse,omitempty"`
	Money    *float64      `protobuf:"fixed64,6,opt,name=money,proto3,oneof" json:"money,omitempty"`
	Type     *TypeOptional `protobuf:"varint,7,opt,name=type,proto3,enum=proto.TypeOptional,oneof" json:"type,omitempty"`
	// Types that are assignable to Values:
	//	*MessageOptional_ValueS
	//	*MessageOptional_ValueI
	//	*MessageOptional_ValueD
	Values  isMessageOptional_Values `protobuf_oneof:"values"`
	Address *AddressOptional         `protobuf:"bytes,11,opt,name=Address,proto3,oneof" json:"Address,omitempty"`
}

func (x *MessageOptional) Reset() {
	*x = MessageOptional{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_optional_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageOptional) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageOptional) ProtoMessage() {}

func (x *MessageOptional) ProtoReflect() protoreflect.Message {
	mi := &file_proto_optional_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageOptional.ProtoReflect.Descriptor instead.
func (*MessageOptional) Descriptor() ([]byte, []int) {
	return file_proto_optional_proto_rawDescGZIP(), []int{0}
}

func (x *MessageOptional) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MessageOptional) GetBirthDay() int64 {
	if x != nil && x.BirthDay != nil {
		return *x.BirthDay
	}
	return 0
}

func (x *MessageOptional) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *MessageOptional) GetSiblings() int32 {
	if x != nil && x.Siblings != nil {
		return *x.Siblings
	}
	return 0
}

func (x *MessageOptional) GetSpouse() bool {
	if x != nil && x.Spouse != nil {
		return *x.Spouse
	}
	return false
}

func (x *MessageOptional) GetMoney() float64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *MessageOptional) GetType() TypeOptional {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return TypeOptional_TYPEOptional_UNSPECIFIED
}

func (m *MessageOptional) GetValues() isMessageOptional_Values {
	if m != nil {
		return m.Values
	}
	return nil
}

func (x *MessageOptional) GetValueS() string {
	if x, ok := x.GetValues().(*MessageOptional_ValueS); ok {
		return x.ValueS
	}
	return ""
}

func (x *MessageOptional) GetValueI() int32 {
	if x, ok := x.GetValues().(*MessageOptional_ValueI); ok {
		return x.ValueI
	}
	return 0
}

func (x *MessageOptional) GetValueD() float64 {
	if x, ok := x.GetValues().(*MessageOptional_ValueD); ok {
		return x.ValueD
	}
	return 0
}

func (x *MessageOptional) GetAddress() *AddressOptional {
	if x != nil {
		return x.Address
	}
	return nil
}

type isMessageOptional_Values interface {
	isMessageOptional_Values()
}

type MessageOptional_ValueS struct {
	ValueS string `protobuf:"bytes,8,opt,name=value_s,json=valueS,proto3,oneof"`
}

type MessageOptional_ValueI struct {
	ValueI int32 `protobuf:"varint,9,opt,name=value_i,json=valueI,proto3,oneof"`
}

type MessageOptional_ValueD struct {
	ValueD float64 `protobuf:"fixed64,10,opt,name=value_d,json=valueD,proto3,oneof"`
}

func (*MessageOptional_ValueS) isMessageOptional_Values() {}

func (*MessageOptional_ValueI) isMessageOptional_Values() {}

func (*MessageOptional_ValueD) isMessageOptional_Values() {}

type AddressOptional struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Street   *string         `protobuf:"bytes,1,opt,name=street,proto3,oneof" json:"street,omitempty"`
	Number   *int32          `protobuf:"varint,2,opt,name=number,proto3,oneof" json:"number,omitempty"`
	PostCode *int32          `protobuf:"varint,3,opt,name=post_code,json=postCode,proto3,oneof" json:"post_code,omitempty"`
	Floor    *int32          `protobuf:"varint,4,opt,name=floor,proto3,oneof" json:"floor,omitempty"`
	Random   *RandomOptional `protobuf:"bytes,5,opt,name=random,proto3,oneof" json:"random,omitempty"`
}

func (x *AddressOptional) Reset() {
	*x = AddressOptional{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_optional_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressOptional) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressOptional) ProtoMessage() {}

func (x *AddressOptional) ProtoReflect() protoreflect.Message {
	mi := &file_proto_optional_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressOptional.ProtoReflect.Descriptor instead.
func (*AddressOptional) Descriptor() ([]byte, []int) {
	return file_proto_optional_proto_rawDescGZIP(), []int{1}
}

func (x *AddressOptional) GetStreet() string {
	if x != nil && x.Street != nil {
		return *x.Street
	}
	return ""
}

func (x *AddressOptional) GetNumber() int32 {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return 0
}

func (x *AddressOptional) GetPostCode() int32 {
	if x != nil && x.PostCode != nil {
		return *x.PostCode
	}
	return 0
}

func (x *AddressOptional) GetFloor() int32 {
	if x != nil && x.Floor != nil {
		return *x.Floor
	}
	return 0
}

func (x *AddressOptional) GetRandom() *RandomOptional {
	if x != nil {
		return x.Random
	}
	return nil
}

type RandomOptional struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldA       *string               `protobuf:"bytes,1,opt,name=FieldA,proto3,oneof" json:"FieldA,omitempty"`
	FieldB       *string               `protobuf:"bytes,2,opt,name=FieldB,proto3,oneof" json:"FieldB,omitempty"`
	FieldC       *string               `protobuf:"bytes,3,opt,name=FieldC,proto3,oneof" json:"FieldC,omitempty"`
	FieldD       *string               `protobuf:"bytes,4,opt,name=FieldD,proto3,oneof" json:"FieldD,omitempty"`
	FieldE       *string               `protobuf:"bytes,5,opt,name=FieldE,proto3,oneof" json:"FieldE,omitempty"`
	FieldF       *string               `protobuf:"bytes,6,opt,name=FieldF,proto3,oneof" json:"FieldF,omitempty"`
	FieldG       *string               `protobuf:"bytes,7,opt,name=FieldG,proto3,oneof" json:"FieldG,omitempty"`
	FieldH       *string               `protobuf:"bytes,8,opt,name=FieldH,proto3,oneof" json:"FieldH,omitempty"`
	FieldI       *string               `protobuf:"bytes,9,opt,name=FieldI,proto3,oneof" json:"FieldI,omitempty"`
	FieldJ       *string               `protobuf:"bytes,10,opt,name=FieldJ,proto3,oneof" json:"FieldJ,omitempty"`
	FieldK       *int64                `protobuf:"varint,11,opt,name=FieldK,proto3,oneof" json:"FieldK,omitempty"`
	FieldL       *int64                `protobuf:"varint,12,opt,name=FieldL,proto3,oneof" json:"FieldL,omitempty"`
	FieldM       *int64                `protobuf:"varint,13,opt,name=FieldM,proto3,oneof" json:"FieldM,omitempty"`
	FieldN       *int64                `protobuf:"varint,14,opt,name=FieldN,proto3,oneof" json:"FieldN,omitempty"`
	FieldO       *string               `protobuf:"bytes,15,opt,name=FieldO,proto3,oneof" json:"FieldO,omitempty"`
	FieldP       *string               `protobuf:"bytes,16,opt,name=FieldP,proto3,oneof" json:"FieldP,omitempty"`
	FieldQ       *int32                `protobuf:"varint,17,opt,name=FieldQ,proto3,oneof" json:"FieldQ,omitempty"`
	FieldR       *string               `protobuf:"bytes,18,opt,name=FieldR,proto3,oneof" json:"FieldR,omitempty"`
	FieldS       *string               `protobuf:"bytes,19,opt,name=FieldS,proto3,oneof" json:"FieldS,omitempty"`
	FieldT       *string               `protobuf:"bytes,20,opt,name=FieldT,proto3,oneof" json:"FieldT,omitempty"`
	FieldU       *int32                `protobuf:"varint,21,opt,name=FieldU,proto3,oneof" json:"FieldU,omitempty"`
	FieldV       *int32                `protobuf:"varint,22,opt,name=FieldV,proto3,oneof" json:"FieldV,omitempty"`
	FieldW       *int32                `protobuf:"varint,23,opt,name=FieldW,proto3,oneof" json:"FieldW,omitempty"`
	FieldX       *int32                `protobuf:"varint,24,opt,name=FieldX,proto3,oneof" json:"FieldX,omitempty"`
	FieldY       *string               `protobuf:"bytes,25,opt,name=FieldY,proto3,oneof" json:"FieldY,omitempty"`
	FieldZ       *bool                 `protobuf:"varint,26,opt,name=FieldZ,proto3,oneof" json:"FieldZ,omitempty"`
	NestedRandom *NestedRandomOptional `protobuf:"bytes,34,opt,name=nested_random,json=nestedRandom,proto3,oneof" json:"nested_random,omitempty"`
}

func (x *RandomOptional) Reset() {
	*x = RandomOptional{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_optional_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandomOptional) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomOptional) ProtoMessage() {}

func (x *RandomOptional) ProtoReflect() protoreflect.Message {
	mi := &file_proto_optional_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomOptional.ProtoReflect.Descriptor instead.
func (*RandomOptional) Descriptor() ([]byte, []int) {
	return file_proto_optional_proto_rawDescGZIP(), []int{2}
}

func (x *RandomOptional) GetFieldA() string {
	if x != nil && x.FieldA != nil {
		return *x.FieldA
	}
	return ""
}

func (x *RandomOptional) GetFieldB() string {
	if x != nil && x.FieldB != nil {
		return *x.FieldB
	}
	return ""
}

func (x *RandomOptional) GetFieldC() string {
	if x != nil && x.FieldC != nil {
		return *x.FieldC
	}
	return ""
}

func (x *RandomOptional) GetFieldD() string {
	if x != nil && x.FieldD != nil {
		return *x.FieldD
	}
	return ""
}

func (x *RandomOptional) GetFieldE() string {
	if x != nil && x.FieldE != nil {
		return *x.FieldE
	}
	return ""
}

func (x *RandomOptional) GetFieldF() string {
	if x != nil && x.FieldF != nil {
		return *x.FieldF
	}
	return ""
}

func (x *RandomOptional) GetFieldG() string {
	if x != nil && x.FieldG != nil {
		return *x.FieldG
	}
	return ""
}

func (x *RandomOptional) GetFieldH() string {
	if x != nil && x.FieldH != nil {
		return *x.FieldH
	}
	return ""
}

func (x *RandomOptional) GetFieldI() string {
	if x != nil && x.FieldI != nil {
		return *x.FieldI
	}
	return ""
}

func (x *RandomOptional) GetFieldJ() string {
	if x != nil && x.FieldJ != nil {
		return *x.FieldJ
	}
	return ""
}

func (x *RandomOptional) GetFieldK() int64 {
	if x != nil && x.FieldK != nil {
		return *x.FieldK
	}
	return 0
}

func (x *RandomOptional) GetFieldL() int64 {
	if x != nil && x.FieldL != nil {
		return *x.FieldL
	}
	return 0
}

func (x *RandomOptional) GetFieldM() int64 {
	if x != nil && x.FieldM != nil {
		return *x.FieldM
	}
	return 0
}

func (x *RandomOptional) GetFieldN() int64 {
	if x != nil && x.FieldN != nil {
		return *x.FieldN
	}
	return 0
}

func (x *RandomOptional) GetFieldO() string {
	if x != nil && x.FieldO != nil {
		return *x.FieldO
	}
	return ""
}

func (x *RandomOptional) GetFieldP() string {
	if x != nil && x.FieldP != nil {
		return *x.FieldP
	}
	return ""
}

func (x *RandomOptional) GetFieldQ() int32 {
	if x != nil && x.FieldQ != nil {
		return *x.FieldQ
	}
	return 0
}

func (x *RandomOptional) GetFieldR() string {
	if x != nil && x.FieldR != nil {
		return *x.FieldR
	}
	return ""
}

func (x *RandomOptional) GetFieldS() string {
	if x != nil && x.FieldS != nil {
		return *x.FieldS
	}
	return ""
}

func (x *RandomOptional) GetFieldT() string {
	if x != nil && x.FieldT != nil {
		return *x.FieldT
	}
	return ""
}

func (x *RandomOptional) GetFieldU() int32 {
	if x != nil && x.FieldU != nil {
		return *x.FieldU
	}
	return 0
}

func (x *RandomOptional) GetFieldV() int32 {
	if x != nil && x.FieldV != nil {
		return *x.FieldV
	}
	return 0
}

func (x *RandomOptional) GetFieldW() int32 {
	if x != nil && x.FieldW != nil {
		return *x.FieldW
	}
	return 0
}

func (x *RandomOptional) GetFieldX() int32 {
	if x != nil && x.FieldX != nil {
		return *x.FieldX
	}
	return 0
}

func (x *RandomOptional) GetFieldY() string {
	if x != nil && x.FieldY != nil {
		return *x.FieldY
	}
	return ""
}

func (x *RandomOptional) GetFieldZ() bool {
	if x != nil && x.FieldZ != nil {
		return *x.FieldZ
	}
	return false
}

func (x *RandomOptional) GetNestedRandom() *NestedRandomOptional {
	if x != nil {
		return x.NestedRandom
	}
	return nil
}

type NestedRandomOptional struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldA *string  `protobuf:"bytes,1,opt,name=FieldA,proto3,oneof" json:"FieldA,omitempty"`
	FieldB *string  `protobuf:"bytes,2,opt,name=FieldB,proto3,oneof" json:"FieldB,omitempty"`
	FieldC *string  `protobuf:"bytes,3,opt,name=FieldC,proto3,oneof" json:"FieldC,omitempty"`
	FieldD *string  `protobuf:"bytes,4,opt,name=FieldD,proto3,oneof" json:"FieldD,omitempty"`
	FieldE *string  `protobuf:"bytes,5,opt,name=FieldE,proto3,oneof" json:"FieldE,omitempty"`
	FieldF *string  `protobuf:"bytes,6,opt,name=FieldF,proto3,oneof" json:"FieldF,omitempty"`
	FieldG *float64 `protobuf:"fixed64,7,opt,name=FieldG,proto3,oneof" json:"FieldG,omitempty"`
	FieldH *float64 `protobuf:"fixed64,8,opt,name=FieldH,proto3,oneof" json:"FieldH,omitempty"`
	FieldI *float64 `protobuf:"fixed64,9,opt,name=FieldI,proto3,oneof" json:"FieldI,omitempty"`
	FieldJ *float64 `protobuf:"fixed64,10,opt,name=FieldJ,proto3,oneof" json:"FieldJ,omitempty"`
	FieldK *float64 `protobuf:"fixed64,11,opt,name=FieldK,proto3,oneof" json:"FieldK,omitempty"`
	FieldL *float64 `protobuf:"fixed64,12,opt,name=FieldL,proto3,oneof" json:"FieldL,omitempty"`
	FieldM *string  `protobuf:"bytes,13,opt,name=FieldM,proto3,oneof" json:"FieldM,omitempty"`
	FieldN *string  `protobuf:"bytes,14,opt,name=FieldN,proto3,oneof" json:"FieldN,omitempty"`
	FieldO *string  `protobuf:"bytes,15,opt,name=FieldO,proto3,oneof" json:"FieldO,omitempty"`
	FieldP *string  `protobuf:"bytes,16,opt,name=FieldP,proto3,oneof" json:"FieldP,omitempty"`
	FieldQ *int64   `protobuf:"varint,17,opt,name=FieldQ,proto3,oneof" json:"FieldQ,omitempty"`
	FieldR *int64   `protobuf:"varint,18,opt,name=FieldR,proto3,oneof" json:"FieldR,omitempty"`
	FieldS *int64   `protobuf:"varint,19,opt,name=FieldS,proto3,oneof" json:"FieldS,omitempty"`
	FieldT *int64   `protobuf:"varint,20,opt,name=FieldT,proto3,oneof" json:"FieldT,omitempty"`
	FieldU *string  `protobuf:"bytes,21,opt,name=FieldU,proto3,oneof" json:"FieldU,omitempty"`
	FieldV *string  `protobuf:"bytes,22,opt,name=FieldV,proto3,oneof" json:"FieldV,omitempty"`
	FieldW *string  `protobuf:"bytes,23,opt,name=FieldW,proto3,oneof" json:"FieldW,omitempty"`
	FieldX *string  `protobuf:"bytes,24,opt,name=FieldX,proto3,oneof" json:"FieldX,omitempty"`
	FieldY *bool    `protobuf:"varint,25,opt,name=FieldY,proto3,oneof" json:"FieldY,omitempty"`
	FieldZ *bool    `protobuf:"varint,26,opt,name=FieldZ,proto3,oneof" json:"FieldZ,omitempty"`
}

func (x *NestedRandomOptional) Reset() {
	*x = NestedRandomOptional{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_optional_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedRandomOptional) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedRandomOptional) ProtoMessage() {}

func (x *NestedRandomOptional) ProtoReflect() protoreflect.Message {
	mi := &file_proto_optional_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedRandomOptional.ProtoReflect.Descriptor instead.
func (*NestedRandomOptional) Descriptor() ([]byte, []int) {
	return file_proto_optional_proto_rawDescGZIP(), []int{3}
}

func (x *NestedRandomOptional) GetFieldA() string {
	if x != nil && x.FieldA != nil {
		return *x.FieldA
	}
	return ""
}

func (x *NestedRandomOptional) GetFieldB() string {
	if x != nil && x.FieldB != nil {
		return *x.FieldB
	}
	return ""
}

func (x *NestedRandomOptional) GetFieldC() string {
	if x != nil && x.FieldC != nil {
		return *x.FieldC
	}
	return ""
}

func (x *NestedRandomOptional) GetFieldD() string {
	if x != nil && x.FieldD != nil {
		return *x.FieldD
	}
	return ""
}

func (x *NestedRandomOptional) GetFieldE() string {
	if x != nil && x.FieldE != nil {
		return *x.FieldE
	}
	return ""
}

func (x *NestedRandomOptional) GetFieldF() string {
	if x != nil && x.FieldF != nil {
		return *x.FieldF
	}
	return ""
}

func (x *NestedRandomOptional) GetFieldG() float64 {
	if x != nil && x.FieldG != nil {
		return *x.FieldG
	}
	return 0
}

func (x *NestedRandomOptional) GetFieldH() float64 {
	if x != nil && x.FieldH != nil {
		return *x.FieldH
	}
	return 0
}

func (x *NestedRandomOptional) GetFieldI() float64 {
	if x != nil && x.FieldI != nil {
		return *x.FieldI
	}
	return 0
}

func (x *NestedRandomOptional) GetFieldJ() float64 {
	if x != nil && x.FieldJ != nil {
		return *x.FieldJ
	}
	return 0
}

func (x *NestedRandomOptional) GetFieldK() float64 {
	if x != nil && x.FieldK != nil {
		return *x.FieldK
	}
	return 0
}

func (x *NestedRandomOptional) GetFieldL() float64 {
	if x != nil && x.FieldL != nil {
		return *x.FieldL
	}
	return 0
}

func (x *NestedRandomOptional) GetFieldM() string {
	if x != nil && x.FieldM != nil {
		return *x.FieldM
	}
	return ""
}

func (x *NestedRandomOptional) GetFieldN() string {
	if x != nil && x.FieldN != nil {
		return *x.FieldN
	}
	return ""
}

func (x *NestedRandomOptional) GetFieldO() string {
	if x != nil && x.FieldO != nil {
		return *x.FieldO
	}
	return ""
}

func (x *NestedRandomOptional) GetFieldP() string {
	if x != nil && x.FieldP != nil {
		return *x.FieldP
	}
	return ""
}

func (x *NestedRandomOptional) GetFieldQ() int64 {
	if x != nil && x.FieldQ != nil {
		return *x.FieldQ
	}
	return 0
}

func (x *NestedRandomOptional) GetFieldR() int64 {
	if x != nil && x.FieldR != nil {
		return *x.FieldR
	}
	return 0
}

func (x *NestedRandomOptional) GetFieldS() int64 {
	if x != nil && x.FieldS != nil {
		return *x.FieldS
	}
	return 0
}

func (x *NestedRandomOptional) GetFieldT() int64 {
	if x != nil && x.FieldT != nil {
		return *x.FieldT
	}
	return 0
}

func (x *NestedRandomOptional) GetFieldU() string {
	if x != nil && x.FieldU != nil {
		return *x.FieldU
	}
	return ""
}

func (x *NestedRandomOptional) GetFieldV() string {
	if x != nil && x.FieldV != nil {
		return *x.FieldV
	}
	return ""
}

func (x *NestedRandomOptional) GetFieldW() string {
	if x != nil && x.FieldW != nil {
		return *x.FieldW
	}
	return ""
}

func (x *NestedRandomOptional) GetFieldX() string {
	if x != nil && x.FieldX != nil {
		return *x.FieldX
	}
	return ""
}

func (x *NestedRandomOptional) GetFieldY() bool {
	if x != nil && x.FieldY != nil {
		return *x.FieldY
	}
	return false
}

func (x *NestedRandomOptional) GetFieldZ() bool {
	if x != nil && x.FieldZ != nil {
		return *x.FieldZ
	}
	return false
}

var File_proto_optional_proto protoreflect.FileDescriptor

var file_proto_optional_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6, 0x03,
	0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x44, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x08,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x08, 0x73, 0x69, 0x62, 0x6c,
	0x69, 0x6e, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x70, 0x6f, 0x75, 0x73,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x06, 0x73, 0x70, 0x6f, 0x75, 0x73,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x48, 0x07, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x07, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x12, 0x19, 0x0a, 0x07, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x49, 0x12, 0x19, 0x0a, 0x07, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x12, 0x35,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x08, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x44, 0x61, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xf5, 0x01, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74,
	0x72, 0x65, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74,
	0x72, 0x65, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6c,
	0x6f, 0x6f, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x22, 0xf9,
	0x08, 0x0a, 0x0e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x43, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x43, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x06, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x06,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x49, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x06, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x49, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4a,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4a,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4b, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x0a, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4b, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x0b, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0c, 0x52,
	0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0d, 0x52, 0x06, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x51, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x10, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x51, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11,
	0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x53, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x06, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x53, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x54, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x54, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x55, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x55, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x15, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x57, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x16, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x57, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x58, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x17, 0x52, 0x06,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x58, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x59, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x06, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x59, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5a,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x19, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5a,
	0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0d, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x1a, 0x52, 0x0c, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x41, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x45, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x48, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4a, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4b, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x51, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x55, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x57, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x58, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x59, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5a, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x22, 0xa6, 0x08, 0x0a, 0x14, 0x4e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x45, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x45, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x06, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07,
	0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x49, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x08, 0x52, 0x06, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x49, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4a, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x09, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4a, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4b, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0a, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4b, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x0b, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0c, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x06,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x06, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x51, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x10, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x51, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x11, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x48, 0x12, 0x52,
	0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x54, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x48, 0x13, 0x52, 0x06, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x54, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x55, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x55, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x57, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x16, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x57, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x58, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17,
	0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x58, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x59, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x48, 0x18, 0x52, 0x06, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x59, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x5a, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x19, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x5a, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x47, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4a, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4b, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x50, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x51,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x54, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x55, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x57, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x58, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x59, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x5a, 0x2a, 0x54, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x59, 0x50, 0x45, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59, 0x50, 0x45, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x52, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59, 0x50, 0x45, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x53, 0x10, 0x02, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x76, 0x69, 0x64, 0x61, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2d,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x2d, 0x76, 0x73, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_optional_proto_rawDescOnce sync.Once
	file_proto_optional_proto_rawDescData = file_proto_optional_proto_rawDesc
)

func file_proto_optional_proto_rawDescGZIP() []byte {
	file_proto_optional_proto_rawDescOnce.Do(func() {
		file_proto_optional_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_optional_proto_rawDescData)
	})
	return file_proto_optional_proto_rawDescData
}

var file_proto_optional_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_optional_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_optional_proto_goTypes = []interface{}{
	(TypeOptional)(0),            // 0: proto.TypeOptional
	(*MessageOptional)(nil),      // 1: proto.MessageOptional
	(*AddressOptional)(nil),      // 2: proto.AddressOptional
	(*RandomOptional)(nil),       // 3: proto.RandomOptional
	(*NestedRandomOptional)(nil), // 4: proto.NestedRandomOptional
}
var file_proto_optional_proto_depIdxs = []int32{
	0, // 0: proto.MessageOptional.type:type_name -> proto.TypeOptional
	2, // 1: proto.MessageOptional.Address:type_name -> proto.AddressOptional
	3, // 2: proto.AddressOptional.random:type_name -> proto.RandomOptional
	4, // 3: proto.RandomOptional.nested_random:type_name -> proto.NestedRandomOptional
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_proto_optional_proto_init() }
func file_proto_optional_proto_init() {
	if File_proto_optional_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_optional_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageOptional); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_optional_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressOptional); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_optional_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandomOptional); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_optional_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedRandomOptional); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_optional_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*MessageOptional_ValueS)(nil),
		(*MessageOptional_ValueI)(nil),
		(*MessageOptional_ValueD)(nil),
	}
	file_proto_optional_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_proto_optional_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_proto_optional_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_optional_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_optional_proto_goTypes,
		DependencyIndexes: file_proto_optional_proto_depIdxs,
		EnumInfos:         file_proto_optional_proto_enumTypes,
		MessageInfos:      file_proto_optional_proto_msgTypes,
	}.Build()
	File_proto_optional_proto = out.File
	file_proto_optional_proto_rawDesc = nil
	file_proto_optional_proto_goTypes = nil
	file_proto_optional_proto_depIdxs = nil
}
